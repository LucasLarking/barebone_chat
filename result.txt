  
  
\subsubsection{./chat/asgi.py}
\begin{Verbatim}[numbers=left, frame=single]
"""
ASGI config for chat project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chat.settings')

application = get_asgi_application()
\end{Verbatim}
  
  
\subsubsection{./chat/__init__.py}
\begin{Verbatim}[numbers=left, frame=single]
\end{Verbatim}
  
  
\subsubsection{./chat/settings.py}
\begin{Verbatim}[numbers=left, frame=single]
"""
Django settings for chat project.

Generated by 'django-admin startproject' using Django 4.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-k6l!n8v-m_5^c)c4-_y3#qu87i$oo&_aql20&kq4f4j-8t&1km'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
'django.contrib.admin',
'django.contrib.auth',
'django.contrib.contenttypes',
'django.contrib.sessions',
'django.contrib.messages',
'django.contrib.staticfiles',
'base.apps.BaseConfig',  # Installera base-appen
]

MIDDLEWARE = [
'django.middleware.security.SecurityMiddleware',
'django.contrib.sessions.middleware.SessionMiddleware',
'django.middleware.common.CommonMiddleware',
'django.middleware.csrf.CsrfViewMiddleware',
'django.contrib.auth.middleware.AuthenticationMiddleware',
'django.contrib.messages.middleware.MessageMiddleware',
'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'chat.urls'

TEMPLATES = [
{
'BACKEND': 'django.template.backends.django.DjangoTemplates',
'DIRS': [
BASE_DIR / 'templates'
],
'APP_DIRS': True,
'OPTIONS': {
'context_processors': [
'django.template.context_processors.debug',
'django.template.context_processors.request',
'django.contrib.auth.context_processors.auth',
'django.contrib.messages.context_processors.messages',
],
},
},
]

WSGI_APPLICATION = 'chat.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
'default': {
'ENGINE': 'django.db.backends.sqlite3',
'NAME': BASE_DIR / 'db.sqlite3',
}
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
{
'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
},
{
'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
},
{
'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
},
{
'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
},
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
BASE_DIR / 'static'
]
# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
\end{Verbatim}
  
  
\subsubsection{./chat/urls.py}
\begin{Verbatim}[numbers=left, frame=single]

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
path('admin/', admin.site.urls),
path('', include('base.urls')),
\end{Verbatim}
  
  
\subsubsection{./chat/wsgi.py}
\begin{Verbatim}[numbers=left, frame=single]
"""
WSGI config for chat project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chat.settings')

application = get_wsgi_application()
\end{Verbatim}
  
  
\subsubsection{./static/styles/room.css}
\begin{Verbatim}[numbers=left, frame=single]
body {

background-color: #313338;
}


.room_description {
max-width: 60rem;

background-color: white;
padding: 4rem 2rem;
margin: 4rem auto;

}

.messages {
padding-bottom: 12rem;
}

.message {
background-color: #34373c;
color: white;
max-width: 60rem;
margin: auto;
padding: 2rem;
margin-bottom: 3rem;
border-radius: 10px;
text-transform: capitalize;
position: relative;
}
.message .date {
position: absolute;
right: 15px;
top: 15px;
opacity: 0.2;
font-size: 1rem;
}

.message_form {
position: fixed;
bottom:20px;
left: 50%;
max-width: 60rem;
transform: translate(-50%, 0);
display: flex;
display: flex;
flex-direction: column;

background-color: rgba(211, 211, 211, 0.335);
background-color: #2b2d31;


}



.message_form #id_message {

background-color: #2b2d31;
color: white;
height: 5rem;
width: 60rem;
max-width: 100vw;
resize: none;
outline: none;
border: none;
padding: 10px;
border-radius: 20px;

}
\end{Verbatim}
  
  
\subsubsection{./static/styles/main.css}
\begin{Verbatim}[numbers=left, frame=single]
* {
margin: 0;
padding: 0;
-webkit-box-sizing: border-box;
box-sizing: border-box;
font-family: "Poppins", sans-serif;
}

html {
font-size: 67.5%;
}

h3 {
font-size: 2rem;
padding-bottom: 1rem;
}

p,
a {
font-size: 1.4rem;

}

nav {
display: flex;
justify-content: space-between;
align-items: center;
width: 60rem;
margin: auto;
color: white;
padding-top: 20px;
}

nav div {
display: flex;
align-items: center;
}

nav .search {
padding: 10px;
border-radius: 5px;
background-color: #2b2d31;
color: white;
border: none;
display: block;
outline: none;
transition: .2s;
}

nav .search:hover, nav .search:focus {
background-color: #25272a;
}

nav a {
text-decoration: none;
display: block;
color: white;
transition: .3s;

}

nav .home {
padding:1rem;
border-radius: 5px;
}
nav .home:hover {
background-color: #43474e;
}

nav .plus {
margin-left: 20px;
width: 20px;
height: 20px;
transition: .2s;
display: block;
overflow: hidden;
position: relative;
transition-timing-function:ease-in-out;

}

nav .plus:hover {
transform: rotate(45deg);
}

nav .plus::before {
width: 2px;
height: 20px;
background-color: white;
display: block;
content: "";
position: absolute;
top: 0;
transform: rotate(90deg);
right: 50%;
overflow: hidden;
}
nav .plus::after {
width: 2px;
height: 20px;
background-color: white;
display: block;
content: "";
position: absolute;
right: 50%;
top: 0;
transform: rotate(0deg);
}
.searchbar {
margin-top: 20vh;
}

.searchbar input {
width: 60rem;
margin: auto;
display: block;
padding: 15px;
border-radius: 5px;
-webkit-box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;
box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;
border: none;
margin-bottom: 3rem;
font-size: 1.4rem;
outline: none;
position: relative;
}

.rooms {
margin: auto;
}

.room {
border-radius: 5px;
display: block;
text-decoration: none;
color: white;
width: 60rem;
max-width: 100%;
margin: auto;
margin-bottom: 4rem;
background-color: #34373c;
-webkit-transition: 0.2s;
transition: 0.2s;

padding: 2rem;
line-break: normal;
position: relative;
}

.room:hover {
background-color: #43474e;
}
.room .date {
position: absolute;
right: 20px;
top: 20px;
opacity: 0.2;
font-size: 1rem;
}




p {
word-wrap: break-word;
}
\end{Verbatim}
  
  
\subsubsection{./static/styles/create_room.css}
\begin{Verbatim}[numbers=left, frame=single]


.room_create_form {
display: flex;
flex-direction: column;
max-width: 60rem;
margin: 10rem auto;
}

.room_create_form label {
color: white;
font-size: 1.4rem;
margin-bottom: .5rem;

}
.room_create_form input, textarea {
color: white;
background-color: #34373c;
border: none;
margin-bottom: 2rem;
outline: none;
padding: 2rem;
border-radius: 5px;

max-width: 100%;
transition: .2s;
}


.room_create_form textarea {
min-height: 15rem;
resize: vertical;
}


.room_create_form input:hover, textarea:hover {
background-color: #35383d;
}
.room_create_form  .submit {
transition: .2s;
cursor: pointer;
}
.room_create_form .submit:hover {

background-color: #43474e;
\end{Verbatim}
  
  
\subsubsection{./templates/base.html}
\begin{Verbatim}[numbers=left, frame=single]
<!DOCTYPE html>
<html lang="en">
{% load static %}

<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wgh
t@400;500;700;800;900&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;
0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700
;1,800;1,900&display=swap" rel="stylesheet">
<link rel="stylesheet" href="{% static 'styles/main.css' %}">
<link rel="stylesheet" href="{% static 'styles/room.css' %}">
<link rel="stylesheet" href="{% static 'styles/create_room.css' %}">

<title>Chat</title>
</head>
<nav>
<div>
<a class="home" href="{% url 'home' %}">HEM</a>
</div>
<div>
<form action="" method="POST">
{%csrf_token%}

{{search_room_form}}


</form>
<a href="{% url 'create_room' %}" class="plus"></a>
</div>
</nav>

<body>


{% block content%}
{% endblock content%}

</body>

\end{Verbatim}
  
  
\subsubsection{./manage.py}
\begin{Verbatim}[numbers=left, frame=single]
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
"""Run administrative tasks."""
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chat.settings')
try:
from django.core.management import execute_from_command_line
except ImportError as exc:
raise ImportError(
"Couldn't import Django. Are you sure it's installed and "
"available on your PYTHONPATH environment variable? Did you "
"forget to activate a virtual environment?"
) from exc
execute_from_command_line(sys.argv)


if __name__ == '__main__':
main()
\end{Verbatim}
  
  
\subsubsection{./base/migrations/__init__.py}
\begin{Verbatim}[numbers=left, frame=single]
\end{Verbatim}
  
  
\subsubsection{./base/migrations/0003_alter_room_description_alter_room_name.py}
\begin{Verbatim}[numbers=left, frame=single]
# Generated by Django 4.1.6 on 2023-02-20 13:23

from django.db import migrations, models


class Migration(migrations.Migration):

dependencies = [
('base', '0002_alter_message_options_alter_message_message'),
]

operations = [
migrations.AlterField(
model_name='room',
name='description',
field=models.TextField(default='.'),
),
migrations.AlterField(
model_name='room',
name='name',
field=models.CharField(default='.', max_length=200),
),
]
\end{Verbatim}
  
  
\subsubsection{./base/migrations/0001_initial.py}
\begin{Verbatim}[numbers=left, frame=single]
# Generated by Django 4.1.6 on 2023-02-12 23:55

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

initial = True

dependencies = [
]

operations = [
migrations.CreateModel(
name='Room',
fields=[
('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
('name', models.CharField(blank=True, max_length=200, null=True)),
('description', models.TextField(blank=True, null=True)),
('updated', models.DateTimeField(auto_now=True)),
('created', models.DateTimeField(auto_now_add=True)),
],
options={
'ordering': ['-updated', '-created'],
},
),
migrations.CreateModel(
name='Message',
fields=[
('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
('message', models.TextField()),
('updated', models.DateTimeField(auto_now=True)),
('created', models.DateTimeField(auto_now_add=True)),
('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.room')),
],
options={
'ordering': ['-updated', '-created'],
},
),
]
\end{Verbatim}
  
  
\subsubsection{./base/migrations/0002_alter_message_options_alter_message_message.py}
\begin{Verbatim}[numbers=left, frame=single]
# Generated by Django 4.1.6 on 2023-02-20 12:27

from django.db import migrations, models


class Migration(migrations.Migration):

dependencies = [
('base', '0001_initial'),
]

operations = [
migrations.AlterModelOptions(
name='message',
options={'ordering': ['updated', 'created']},
),
migrations.AlterField(
model_name='message',
name='message',
field=models.CharField(max_length=1000),
),
]
\end{Verbatim}
  
  
\subsubsection{./base/models.py}
\begin{Verbatim}[numbers=left, frame=single]
from django.db import models


class Room(models.Model):

name = models.CharField(max_length=200)
description = models.TextField()

updated = models.DateTimeField(auto_now=True)
created = models.DateTimeField(auto_now_add=True)

# Visa nyaste rummen först
class Meta:
ordering = ['-updated', '-created']

def __str__(self):
return self.name


class Message(models.Model):

room = models.ForeignKey(Room, on_delete=models.CASCADE)
message = models.CharField(max_length=1000)
updated = models.DateTimeField(auto_now=True)
created = models.DateTimeField(auto_now_add=True)

# Visa nyaste messagena först
class Meta:
ordering = ['updated', 'created']

def __str__(self):
return self.message[0:50]
\end{Verbatim}
  
  
\subsubsection{./base/__init__.py}
\begin{Verbatim}[numbers=left, frame=single]
\end{Verbatim}
  
  
\subsubsection{./base/apps.py}
\begin{Verbatim}[numbers=left, frame=single]
from django.apps import AppConfig


class BaseConfig(AppConfig):
default_auto_field = 'django.db.models.BigAutoField'
name = 'base'
\end{Verbatim}
  
  
\subsubsection{./base/forms.py}
\begin{Verbatim}[numbers=left, frame=single]
from django.forms import ModelForm
from .models import Room, Message
from django import forms

# Formuläret för användare att skapa rum


class Create_room_form(ModelForm):

name = forms.CharField(
label='Namn',
widget=forms.TextInput(attrs={
'autocomplete': 'off',
'autocapitalize': 'sentences',
})
)
description = forms.CharField(
label='Beskrivning',
widget=forms.Textarea(attrs={
'autocomplete': 'off',
'autocapitalize': 'sentences',
})
)

class Meta:
model = Room
fields = ('name', 'description')
required = False


# Formuläret för användare att skapa rum
class Create_message_form(ModelForm):
message = forms.CharField(
label='',
widget=forms.TextInput(attrs={
'placeholder': 'Skreiv Ett Meddelande...',
'autocomplete': 'off',
'autocapitalize': 'sentences',
})
)

class Meta:
model = Message
fields = ('message', )
required = False


# Formuläret för att söka efter rum

class search_room_form(forms.Form):
name = forms.CharField(
label='',
max_length=100,
widget=forms.TextInput(attrs={
'placeholder': 'Sök Efter Diskutioner',
'class': 'search'
}))
\end{Verbatim}
  
  
\subsubsection{./base/admin.py}
\begin{Verbatim}[numbers=left, frame=single]
from django.contrib import admin

# Importera rum och meddelande och visa dem i admin-panelen
from .models import Room, Message
admin.site.register(Room)
admin.site.register(Message)
\end{Verbatim}
  
  
\subsubsection{./base/templates/base/room.html}
\begin{Verbatim}[numbers=left, frame=single]
{% extends 'base.html' %}
{% block content%}


<div class="room_description">
<h1 class="name">{{room.name}}</h1>
<p class="description">{{room.description}}</p>

</div>

<section class="messages">
{% for message in room_messages %}
<div class="message">
<p>{{message}}</p>
<span class="date">{{message.created| date:"d M Y" }}</span>

</div>

{% endfor %}
</section>

<form class="message_form" action="" method="POST">
{%csrf_token%}

{{form}}


</form>
\end{Verbatim}
  
  
\subsubsection{./base/templates/base/home.html}
\begin{Verbatim}[numbers=left, frame=single]


{% extends 'base.html' %}
{% block content%}




<form class="searchbar" action="" method="POST">
{%csrf_token%}

{{search_room_form}}


</form>
<section class="rooms">
{% for room in rooms %}

<a class="room" href="{% url 'room' room.id %}">
<h3 class="room_title">{{room.name}}</h3>
<p>{{room.description}}</p>
<span class="date">{{room.created| date:"d M Y" }}</span>
</a>
{% endfor %}
</section>
{% endblock content%}
\end{Verbatim}
  
  
\subsubsection{./base/templates/base/static/base.html}
\begin{Verbatim}[numbers=left, frame=single]
<!DOCTYPE html>
<html lang="en">
{% load static %}
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="stylesheet" href="{% static 'styles/main.css' %}">
<title>Chat</title>
</head>
<body>
<nav>
<a href="">Hem</a>
<a href="">Skapa rum</a>
<input type="text" placeholder="Sök Efter Diskutioner" class="searchbar">
</nav>

{% block content %} {% endblock content %}
</body>
\end{Verbatim}
  
  
\subsubsection{./base/templates/base/create_room.html}
\begin{Verbatim}[numbers=left, frame=single]
{% extends 'base.html' %}
{% block content%}
<form class="room_create_form" action="" method="POST">
{%csrf_token%}
{{form}}
<input class="submit" type="submit" value="Skapa Rum">
</form>
\end{Verbatim}
  
  
\subsubsection{./base/tests.py}
\begin{Verbatim}[numbers=left, frame=single]
from django.test import TestCase

# Create your tests here.
\end{Verbatim}
  
  
\subsubsection{./base/urls.py}
\begin{Verbatim}[numbers=left, frame=single]
from django.urls import path
from . import views

# Sätt upp all URL för sidan
urlpatterns = [
path('', views.home, name="home"),
path('room/<str:pk>', views.room, name="room"),
path('create_room/', views.create_room, name="create_room"),
]
\end{Verbatim}
  
  
\subsubsection{./base/views.py}
\begin{Verbatim}[numbers=left, frame=single]
from django.shortcuts import render, redirect
from .models import Room
from .forms import Create_room_form, Create_message_form, search_room_form



def home(request):
rooms = Room.objects.all()
context = {
'rooms': rooms,
'search_room_form': search_room_form
}

if request.method == 'POST':
form = search_room_form(request.POST)
if form.is_valid():
search_term = form.cleaned_data.get('name')
print(form.cleaned_data)
print(search_term)
rooms = Room.objects.filter(name__icontains=search_term)
context = {
'rooms': rooms,
'search_room_form': search_room_form
}
return render(request, 'base/home.html', context)
return render(request, 'base/home.html', context)


def create_room(request):
form = Create_room_form()

if request.method == 'POST':  # Validera datan när ett formulär skickats in
form = Create_room_form(request.POST)
if form.is_valid():
form.save()
# skicka til lbaka användaren till startsidan
return redirect('home')

context = {
'form': form
}

return render(request, 'base/create_room.html', context)


def room(request, pk):
room = Room.objects.get(id=pk)  # Get corresponding room
# få alla meddelanden tillhörande tråden
room_messages = room.message_set.all()
form = Create_message_form()

if request.method == 'POST':
form = Create_message_form(request.POST)
if form.is_valid():

message = form.save(commit=False)
message.room = room
message.save()
return redirect('room', pk=room.id)

context = {
'room': room,
'room_messages': room_messages,
'form': form
}
return render(request, 'base/room.html', context)
\end{Verbatim}
